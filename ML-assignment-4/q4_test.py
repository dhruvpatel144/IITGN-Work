# -*- coding: utf-8 -*-
"""Q4_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dUjXq9nEOX2PMOboEnFAB_-x-hQGM49x
"""

import numpy as np
import matplotlib.pyplot as plt
from preprocessing.polynomial_features import PolynomialFeatures
from linearRegression.linear_regression import LinearRegression
import pandas as pd
import os.path
from os import path
from metrics import *
np.random.seed(45)  #Setting seed for reproducibility

if not path.exists('Plots/Question4/'):
  os.makedirs('Plots/Question4/')

x = np.array([i*np.pi/180 for i in range(60,300,2)])
y = 3*x + 8 + np.random.normal(0,3,len(x))
x = np.array([x]).T

#TODO : Write here
#Preprocess the input using the polynomial features
#Solve the resulting linear regression problem by calling any one of the 
#algorithms you have implemented.

degs = [1, 2, 3, 4, 5, 6, 7, 8, 9]
norms = []
for i in range(1, 10):
  poly = PolynomialFeatures(degree=i, include_bias=False)
  X = poly.transform(x)
  LR = LinearRegression(fit_intercept=True)
  LR.fit_normal_equations(X, y)
  yhat = LR.predict(X)
  print('For degree =', i)
  print('RMSE: ', rmse(yhat, y))
  print('MAE: ', mae(yhat, y))
  m = np.linalg.norm(LR.coef_)
  print('Theta norm: ', m)
  norms.append(m)
  print("---------------------------")
  plt.figure()
  plt.title(f'degree = {i}')
  plt.scatter(x, y)
  plt.plot(x, yhat)
plt.show()

plt.plot(degs, norms)
plt.show()