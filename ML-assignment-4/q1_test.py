# -*- coding: utf-8 -*-
"""Q1_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qS8-5c3lwMfeY1LGlMIEVk-f-5K2bDZC
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from linearRegression.linear_regression import LinearRegression
from sklearn.model_selection import train_test_split as tts
from metrics import *
import time

np.random.seed(45)

N = 30
P = 5
X = pd.DataFrame(np.random.randn(N, P))
y = pd.Series(np.random.randn(N))
print(X.shape)


#Evaluating sklearn's implementation of linear regression
tmse = 0
tmae = 0
t1 = time.time_ns()
print('For sklearn LinearRegression : ')
for i in range(20):
    LR = LinearRegression(fit_intercept=True)
    LR.fit_sklearn_LR(X, y)
    y_hat = LR.predict(X)
    tmse += rmse(y_hat, y)
    tmae += mae(y_hat, y)
t2 = time.time_ns()
print('RMSE: ', tmse/20)
print('MAE: ', tmae/20)
print('Execution time (ms): ', (t2-t1)/20000000)
print("---------------------------")


#Evaluating solution of linear regression using normal equations
tmse = 0
tmae = 0
t1 = time.time_ns()
print('For normal equations : ')
for i in range(20):
    LR = LinearRegression(fit_intercept=True)
    LR.fit_normal_equations(X, y)
    y_hat = LR.predict(X)
    tmse += rmse(y_hat, y)
    tmae += mae(y_hat, y)
t2 = time.time_ns()
print('RMSE: ', tmse/20)
print('MAE: ', tmae/20)
print('Execution time (ms): ', (t2-t1)/20000000)
print("---------------------------")


#Evaluating solution of linear regression using SVD
tmse = 0
tmae = 0
t1 = time.time_ns()
print('For SVD : ')
for i in range(20):
    LR = LinearRegression(fit_intercept=True)
    LR.fit_SVD(X, y)
    y_hat = LR.predict(X)
    tmse += rmse(y_hat, y)
    tmae += mae(y_hat, y)
t2 = time.time_ns()
print('RMSE: ', tmse/20)
print('MAE: ', tmae/20)
print('Execution time (ms): ', (t2-t1)/20000000)
print("---------------------------")

X, Xt, y, yt = tts(X, y, test_size=0.1)


LR = LinearRegression(fit_intercept=True)
LR.fit_sklearn_LR(X, y)
y_hat = LR.predict(Xt)

print('For sklearn LinearRegression using train-test-split : ')
print('RMSE: ', rmse(y_hat, yt))
print('MAE: ', mae(y_hat, yt))
print("---------------------------")